package leetcodeArray

// Given two strings s and t which consist of only lowercase letters.

// String t is generated by random shuffling string s and then add one more letter at a random position.

// Find the letter that was added in t.

// Example:

// Input:
// s = "abcd"
// t = "abcde"

// Output:
// e

// Explanation:
// 'e' is the letter that was added.

//==================================Approach 2: Using HashMap==================================
// Time Complexity: O(N)O(N), where NN is length of the strings. Since, we iterate through both the strings once.

// Space Complexity: O(1)O(1). The problem states string s and string t have lowercase letters. Thus, the total number of unique characters and eventually buckets in the hash map possible are just 26.
//======================================================================================================
// func FindTheDifference(s string, t string) byte {
// 	var output byte
// 	if len(s) < len(t) {
// 		s, t = t, s
// 	}
// 	m := map[string]int{}
// 	for _, v := range s {
// 		m[string(v)]++
// 	}
// 	for _, v := range t {
// 		m[string(v)]--
// 	}
// 	for k, v := range m {
// 		if v == 1 {
// 			output = []byte(k)[0]
// 		}
// 	}
// 	return output
// }

//==================================Approach 3: Bit Manipulation==================================
// Time Complexity: O(N)O(N), where NN is length of the strings. Since, we iterate through both the strings once.

// Space Complexity: O(1)O(1).
//======================================================================================================
func FindTheDifference(s string, t string) byte {
	var output int
	for _, v := range s {
		output ^= int(v)
	}
	for _, v := range t {
		output ^= int(v)
	}
	return byte(rune(output))
}
